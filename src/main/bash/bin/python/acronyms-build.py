#!/usr/bin/env python3

#-------------------------------------------------------------------------------
# ============LICENSE_START=======================================================
#  Copyright (C) 2018 Sven van der Meer. All rights reserved.
# ================================================================================
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# SPDX-License-Identifier: Apache-2.0
# ============LICENSE_END=========================================================
#-------------------------------------------------------------------------------

##
## acronyms-build - builds targets (e.g. ADOC) from acronym YAML sources
##
## @author     Sven van der Meer <vdmeer.sven@mykolab.com>
## @version    v0.0.0
##


##
## Includes, all we need
##
import yaml             ## parsing YAML files
import os               ## operating system, e.g. file handling
from os import walk     ## for walking directories
import functools        ## some tools for functions
import sys, getopt      ## system for exit, getopt for CLI parsing
import glob             ## gobal globbing to get YAML files recursively
import pathlib          ## mkdirs in Python
import datetime         ## to get date/time for ADOC files



##
## Global variables
##
task_level = "warn"         ## warning level
yaml_dir = ''               ## YAML directory
output_dir = ''             ## empty output directory, means same as the YAML file

acronyms = {}               ## dictionary of acronyms
acr_idx  = {}               ## index for acronyms, key is short and value is list of names

target_adoc = False         ## target ADOC

adoc_header = "//\n"        ## header for ADOC files
adoc_header += "// This file was generated by SKB-Dashboard, task 'library-ext'\n"
adoc_header += "// - on " + datetime.datetime.now().strftime("%A %B %e") + " at " + datetime.datetime.now().strftime("%T") + "\n"
adoc_header += "// - skb-dashboard: https://vdmeer.github.io/skb/dashboard\n"
adoc_header += "//\n\n[horizontal]\n"



##
## DO NOT CHANGE CODE BELOW, unless you know what you are doing
##



##
## function: print help, for empty or wrong command line
##
def help():
    print("")
    print("acronyms-build - builds targets (e.g. ADOC) from acronym YAML sources\n")
    print("       Usage: acronyms-build [options]\n")
    print("       Options")
    print("          [-A | --all]                     - activate all targets")
    print("          [-a | --adoc]                    - target ADOC: create ADOC file")
    print("          [-h | --help]                    - this help screen")
    print("          [-o | --output-directory] <dir>  - output directory, default is same as YAML source")
    print("          [-T | --task-level] <level>      - task log level: error, warn, warn-strict, info, debug, trace")
    print("          [-y | --yaml-directory] <dir>    - YAML top directory")
    print("\n")
    print("\n")
    print("Ceated ADOC files will be written to the output directory, if set")
    print("\n")



##
## function: parse command line
##
def cli(argv):
    global output_dir
    global yaml_dir
    global task_level

    global target_adoc



    try:
        opts, args = getopt.getopt(argv,"Aaho:T:y:",["yaml-directory=","output-directory=","help","task-level=","all","adoc"])
    except getopt.GetoptError:
        help()
        sys.exit(70)
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            help()
            sys.exit(0)
        elif opt in ("-T", "--task-level"):
            task_level = arg
        elif opt in ("-y", "--yaml-directory"):
            yaml_dir = arg
        elif opt in ("-o", "--output-directory"):
            output_dir = arg
        elif opt in ("-A", "--all"):
            target_adoc = True
        elif opt in ("-a", "--adoc"):
            target_adoc = True




##
## function: write an acronym to an ADOC file
##
def add_to_adoc_file(dict, entry, file, with_cat, with_addons):
    file_exists = os.path.isfile(file)
    if file_exists == False:
        stream_out = open(file,'w')
        stream_out.write(adoc_header)
        stream_out.close()

    acr_short = ''
    if 'short-target' in dict[entry] and 'adoc' in dict[entry]['short-target']:
        acr_short = dict[entry]['short-target']['adoc']
    else:
        acr_short = dict[entry]['short']
    acr_long = ''
    if 'long-target' in dict[entry] and 'adoc' in dict[entry]['long-target']:
        acr_long = dict[entry]['long-target']['adoc']
    elif 'en' in dict[entry]['long']:
        acr_long = dict[entry]['long']['en']
    else:
        acr_long = dict[entry]['long'][next(iter(dict[entry]['long']))]

    acr_addon = ' '
    if with_cat == True:
        acr_addon += '(' + os.path.dirname(entry) + ')'
    if with_addons == True:
        if 'description' in dict[entry]:
            acr_addon += "\n    * Description: "
            if 'en' in dict[entry]['description']:
                acr_addon += dict[entry]['description']['en']
            else:
                acr_addon += dict[entry]['description'][next(iter(dict[entry]['description']))]
        if 'notes' in dict[entry]:
            acr_addon += "\n    * Notes: "
            if 'en' in dict[entry]['notes']:
                acr_addon += dict[entry]['notes']['en']
            else:
                acr_addon += dict[entry]['notes'][next(iter(dict[entry]['notes']))]
        if 'urls' in dict[entry]:
            acr_addon += "\n    * Links: "
            count = 0
            for url in dict[entry]['urls']:
                if count > 0:
                    acr_addon += ", "
                acr_addon += dict[entry]['urls'][url].strip() + "[" + url + "] "
                count += 1
    acr_addon += "\n"

    stream_out = open(file,'a')
    stream_out.write(acr_short + ":: " + acr_long + acr_addon)
    stream_out.close()



##
## function: write acronym ADOC files, one per first character
##
def build_by_char(dict, idx):
    if output_dir != '':
        for key_sorted in sorted(idx.keys()):
            for entry in idx[key_sorted]:
                first_char = dict[entry]['short'][0].upper()

                if target_adoc == True:
                    bc_dir = output_dir + "/by-character/"
                    pathlib.Path(bc_dir).mkdir(parents=True, exist_ok=True)
                    file = bc_dir + first_char + ".adoc"
                    if first_char.isalpha() == False:
                        file = bc_dir + "0-9.adoc"
                    add_to_adoc_file(dict, entry, file, True, False)

                    bc_dir = output_dir + "/by-category/"
                    file = bc_dir + os.path.dirname(entry) + ".adoc"
                    pathlib.Path(os.path.dirname(file)).mkdir(parents=True, exist_ok=True)
                    add_to_adoc_file(dict, entry, file, False, True)



##
## function: sort acronyms by value of short entry
##
def index_acronyms(dict, idx):
    for key in dict:
        short_lc = dict[key]['short'].lower()
        if short_lc in idx:
            idx[short_lc].append(key)
        else:
            list = [ key ]
            idx[short_lc] = list



##
## function: process a single YAML file
##
def process_file(file):
    file_exists = os.path.isfile(file)
    if file_exists == True:
        stream = open(file,'r')

        data = yaml.load(stream)
        stream.close()
        entries = data[list(data.keys())[0]]    ## dictionary with all entries
        key = list(data.keys())[0]              ## key name of the YAML spec

        if not key in acronyms:
            entries['src-file'] = file
            acronyms[key] = entries
        else:
            print("      -> key %s already in dictionary, defined in %s" % (key, acronyms[key]['src-file']))
            sys.exit(80)

    else:
        print("error: could not open file: %s" % file)
        sys.exit(72)



##
## function: main function
##
def main(argv):
    cli(argv)

    print("    > YAML directory: %s" % yaml_dir)
    dir_exists = os.path.isdir(yaml_dir)
    if dir_exists == True:
        files = glob.glob(yaml_dir + '/**/*.yaml', recursive=True)
        for file in files:
            process_file(file)

        index_acronyms(acronyms, acr_idx)
        print("\n    > found %d YAML files and %d acronyms" % (len(files), len(acronyms)))
        build_by_char(acronyms, acr_idx)

    else:
        print("error: could not open YAML directory: %s" % yaml_dir)
        sys.exit(71)



##
## Call main
##
if __name__ == "__main__":
    main(sys.argv[1:])
    print("    > done")
